<routes xmlns="http://camel.apache.org/schema/spring">

    <route id="db-event-processor" errorHandlerRef="outBoundErrorHandler">
        <from uri="direct:db-event-processor" />

        <log message="Processing db event: ${body}" loggingLevel="DEBUG" />

        <when>
            <!-- For a subclass table, fetch the identifier(uuid) from the parent table e.g person.uuid value for patient table joining on the FK -->
            <simple>${body.identifier} == null &amp;&amp; ${exchangeProperty.is-subclass} == true</simple>
            <choice>
                <when>
                    <simple>${body.tableName} == 'patient'</simple>
                    <setProperty name="debezium-refTable">
                        <constant>person</constant>
                    </setProperty>
                    <setProperty name="debezium-refColumn">
                        <constant>person_id</constant>
                    </setProperty>
                    <setProperty name="debezium-column">
                        <constant>patient_id</constant>
                    </setProperty>
                </when>
                <otherwise>
                    <setProperty name="debezium-refTable">
                        <constant>orders</constant>
                    </setProperty>
                    <setProperty name="debezium-refColumn">
                        <constant>order_id</constant>
                    </setProperty>
                    <setProperty name="debezium-column">
                        <constant>order_id</constant>
                    </setProperty>
                </otherwise>
            </choice>

            <log message="Looking up uuid for ${body.tableName} from ${exchangeProperty.debezium-refTable} table" loggingLevel="DEBUG" />

            <toD uri="sql:SELECT uuid FROM ${exchangeProperty.debezium-refTable} WHERE ${exchangeProperty.debezium-refColumn}='${body.primaryKeyId}'?dataSource=openmrsDataSource" />

            <script>
                <spel>#{getProperty('event').setIdentifier(body[0].get('uuid'))}</spel>
            </script>
        </when>

        <!-- For deletes and updates, ensure there is no retry items in the queue for the entity
            so that events that happened later don't overwrite those that happened before them

            Note that this ONLY applies to new events and not retries, we don't explicitly check for this because
            the header check for CamelDebeziumOperation be false and retry-count will be 0 anyways
        -->
        <when>
            <simple>${headers.CamelDebeziumOperation} != 'c' &amp;&amp; ${exchangeProperty.retry-count} > 0</simple>
            <log message="Moving the event to the failure queue because the entity has ${exchangeProperty.retry-count} event(s) in the retry queue" />
            <setProperty name="retry-event-message">
                <simple>Cannot process the event because the entity has ${exchangeProperty.retry-count} event(s) in the retry queue</simple>
            </setProperty>
            <throwException exceptionType="java.lang.Exception" message="${exchangeProperty.retry-event-message}" />
        </when>

        <log message="Publishing to destination: {{db-event.destination}}" loggingLevel="DEBUG" />

        <setBody>
            <simple>${exchangeProperty.event}</simple>
        </setBody>

        <toD uri="direct:{{db-event.destination}}" />

        <!-- TODO Move deleting of item from queue to the retry-route, reason it is here is because the splitter in
            the retry-route doesn't work properly with a NoErrorHandler -->
        <when>
            <simple>${exchangeProperty.retry-item-id} != null</simple>
            <log message="Removing from queue" />

            <toD uri="jpa:SenderRetryQueueItem?query=DELETE FROM SenderRetryQueueItem WHERE id = ${exchangeProperty.retry-item-id}" />
        </when>

        <log message="Done processing db event" loggingLevel="DEBUG" />
    </route>

</routes>